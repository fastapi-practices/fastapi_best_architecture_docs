import{_ as k,c as p,f as n,b as r,w as e,r as d,o,a as i,h as l}from"./app-DqtJ7nxx.js";const g={};function y(c,s){const h=d("Tabs");return o(),p("div",null,[s[12]||(s[12]=n(`<p>Celery 对于绝大数人来讲，学习路线非常曲折，很难以理解其设计的复杂性，加上它不是很优雅的文档（当然，它很全面），让大多数人将其抛之脑后，今天，我们一起来打破障碍，拥抱 celery</p><h2 id="为什么选择-celery" tabindex="-1"><a class="header-anchor" href="#为什么选择-celery"><span>为什么选择 Celery?</span></a></h2><p>Celery 是一个基于 Python 开发的分布式任务队列系统，它在处理繁重计算或复杂任务具备极好的优势，因为它不会和主线程应用共享进程，而是在一个独立的进程中运行，这意味着，这些任务将被异步处理，而不会占用主线程应用的资源，这可以大大提高主应用程序的响应速度和吞吐量；你可以在我们的项目中找到迁移到 Celery 的相关讨论，请查看：<a href="https://github.com/fastapi-practices/fastapi_best_architecture/discussions/225" target="_blank" rel="noopener noreferrer">#225</a></p><h2 id="broker-消息代理-中间件" tabindex="-1"><a class="header-anchor" href="#broker-消息代理-中间件"><span>Broker（消息代理/中间件）</span></a></h2><p>在 <a href="https://docs.celeryq.dev/projects/celery-enhancement-proposals/en/latest/glossary.html?highlight=broker" target="_blank" rel="noopener noreferrer">Celery 词汇表</a> 中对 Broker 有以下描述：</p><blockquote><p><a href="https://www.enterpriseintegrationpatterns.com/" target="_blank" rel="noopener noreferrer">企业集成模式 </a> 将 <a href="https://www.enterpriseintegrationpatterns.com/patterns/messaging/MessageBroker.html" target="_blank" rel="noopener noreferrer">消息代理 </a> 定义为一种架构构件，它可以接收来自多个目的地的 <a href="https://docs.celeryq.dev/projects/celery-enhancement-proposals/en/latest/glossary.html?highlight=broker#term-Message" target="_blank" rel="noopener noreferrer">消息</a> ，确定正确的目的地并将消息路由到正确的通道</p></blockquote><p>在 Celery 中，我们可以将它视为存储已创建的调度任务并进行消息传递的桥梁，而它本身并不会执行任务；当任务被调度时，Broker 会存储调度任务消息，当 Worker 执行任务时，会从 Broker 调度任务消息中提取任务，因此，Broker 是 Celery 工作的重要组件</p><p>Celery 在文档 <a href="https://docs.celeryq.dev/en/v5.4.0/getting-started/backends-and-brokers/index.html" target="_blank" rel="noopener noreferrer">后端和代码</a> 中列出了所支持的消息代理，fba 将通过 <code>ENVIRONMENT</code> 环境变量来自动选择使用 Redis 还是 <em>RabbitMQ</em></p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-python"><span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">@model_validator</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#986801;--shiki-light-font-style:inherit;">mode</span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">=</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&#39;before&#39;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">)</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">@</span><span style="--shiki-dark:#56B6C2;--shiki-light:#0184BC;">classmethod</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">def</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> validate_celery_broker</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#E5C07B;--shiki-dark-font-style:italic;--shiki-light:#986801;--shiki-light-font-style:inherit;">cls</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span><span style="--shiki-dark:#D19A66;--shiki-dark-font-style:italic;--shiki-light:#986801;--shiki-light-font-style:inherit;"> values</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">):</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">    if</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> values[</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&#39;ENVIRONMENT&#39;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">] </span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">==</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> &#39;prod&#39;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">:</span></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">        # dev 环境默认使用 redis，如果是 prod 环境，则使用 rabbitmq</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">        values[</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&#39;CELERY_BROKER&#39;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">] </span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">=</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> &#39;rabbitmq&#39;</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">    return</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> values</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="worker" tabindex="-1"><a class="header-anchor" href="#worker"><span>Worker</span></a></h2><p>Worker 是调度任务的实际执行者，它从 Broker 中提取任务并执行，并且这是一种监听行为，当 Broker 接收调度信息后，Worker 就会提取任务并执行</p><p>Worker 可以同时运行多个以进行分布式处理，默认情况下，Celery 会为计算机的启动对应内核数量的 Worker，假如计算机有 16 个内核，那么，将默认启动 16 个 Worker</p><p>如果没有 Worker 运行，调度任务消息会在 Broker 中累积，直到有 Worker 接收并执行</p><h2 id="backend" tabindex="-1"><a class="header-anchor" href="#backend"><span>Backend</span></a></h2><p>Celery 用户指南中的 <a href="https://docs.celeryq.dev/en/v5.4.0/userguide/tasks.html#result-backends" target="_blank" rel="noopener noreferrer">任务页面</a> 对 Backend 有如下介绍：</p><blockquote><p>如果你想跟踪任务或需要返回值，那么 Celery 必须将状态存储或发送到某个地方，以便日后检索。有几种内置的结果后端可供您选择：SQLAlchemy/Django ORM、Memcached、RabbitMQ/QPid (rpc) 和 Redis，您也可以定义自己的后端；没有哪种后端能很好地适用于每种使用情况。 您应该了解每个后端的优缺点，然后选择最适合您需求的后端</p></blockquote><p>我们在 fba 中使用数据库作为默认存储后端</p><p>场景假设：跟踪异步任务的结果并返回结果</p><p>你正在构建一个耗时的生成测试报告的任务程序，为了在页面中直观的看到效果，你可以在前端项目中触发启动任务接口，FastAPI 收到请求后，触发 Celery 执行任务，此时，任务已经在 Celery 中执行，而不会阻塞 FastAPI 主应用，也不会占用 FastAPI 主应用资源，等待任务执行完成后，FastAPI 将返回任务结果，然后前端再对返回结果进行处理</p><p>在上述场景中，任务会将结果存储到 Backend，它不会存储未处理任务的状态，只有任务有结果后，才会进行存储；你可以在 Celery 状态文档 中查看所有状态信息；Celery 执行任务并不强制要求使用 Backend，但是，如果你需要查看任务的结果，则必须使用 Backend</p><h2 id="优雅的集成" tabindex="-1"><a class="header-anchor" href="#优雅的集成"><span>优雅的集成</span></a></h2><p>我们在 fba 中以非常优雅的方式集成了 Celery，你无需担心 Celery 苛刻的文件结构成本，只需通过简单的配置就可以轻松使用它，并且，我们支持直接创建异步函数的任务， <mark>在 Celery6.0 版本之前，官网不提供异步函数支持</mark></p><p>进入源码 <code>backend/app</code> 目录，其中，task 目录就是我们的 Celery 应用程序，如果你不想使用它，而是使用其他任务应用，可以直接删除此文件夹</p><p>进入 task 目录后，其中 <code>celery.py</code> 是 Celery 的初始化文件，包含了启动 Celery 启动的参数配置，此文件无需进行任何修改，下面，我们将通过视频进行详细介绍：<a href="https://www.bilibili.com/video/BV1KjkmYdE7q/?share_source=copy_web&amp;vd_source=ccb2aae47e179a51460c20d165021cb7" target="_blank" rel="noopener noreferrer">Celery 集成</a></p><h2 id="高级用法" tabindex="-1"><a class="header-anchor" href="#高级用法"><span>高级用法</span></a></h2><h3 id="执行池" tabindex="-1"><a class="header-anchor" href="#执行池"><span>执行池</span></a></h3><p>我们要根据实际情况为 worker 选择不同的执行池，目前推荐以下几种类型：</p>`,27)),r(h,{id:"83",data:[{id:"prefork"},{id:"threads"},{id:"gevent"}]},{title0:e(({value:a,isActive:t})=>[...s[0]||(s[0]=[l("prefork",-1)])]),title1:e(({value:a,isActive:t})=>[...s[1]||(s[1]=[l("threads",-1)])]),title2:e(({value:a,isActive:t})=>[...s[2]||(s[2]=[l("gevent",-1)])]),tab0:e(({value:a,isActive:t})=>[...s[3]||(s[3]=[i("p",null,"任务涉及大量计算（如图像处理、数据计算等）",-1),i("div",{class:"language-bash line-numbers-mode","data-highlighter":"shiki","data-ext":"bash",style:{"--shiki-dark":"#abb2bf","--shiki-light":"#383A42","--shiki-dark-bg":"#282c34","--shiki-light-bg":"#FAFAFA"}},[i("pre",{class:"shiki shiki-themes one-dark-pro one-light vp-code"},[i("code",{class:"language-bash"},[i("span",{class:"line"},[i("span",{style:{"--shiki-dark":"#61AFEF","--shiki-light":"#4078F2"}},"celery"),i("span",{style:{"--shiki-dark":"#D19A66","--shiki-light":"#986801"}}," -A"),i("span",{style:{"--shiki-dark":"#98C379","--shiki-light":"#50A14F"}}," app.task.celery"),i("span",{style:{"--shiki-dark":"#98C379","--shiki-light":"#50A14F"}}," worker"),i("span",{style:{"--shiki-dark":"#D19A66","--shiki-light":"#986801"}}," -l"),i("span",{style:{"--shiki-dark":"#98C379","--shiki-light":"#50A14F"}}," info"),i("span",{style:{"--shiki-dark":"#D19A66","--shiki-light":"#986801"}}," -P"),i("span",{style:{"--shiki-dark":"#98C379","--shiki-light":"#50A14F"}}," prefork")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"})])],-1)])]),tab1:e(({value:a,isActive:t})=>[...s[4]||(s[4]=[i("p",null,"不需要异步",-1),i("div",{class:"language-bash line-numbers-mode","data-highlighter":"shiki","data-ext":"bash",style:{"--shiki-dark":"#abb2bf","--shiki-light":"#383A42","--shiki-dark-bg":"#282c34","--shiki-light-bg":"#FAFAFA"}},[i("pre",{class:"shiki shiki-themes one-dark-pro one-light vp-code"},[i("code",{class:"language-bash"},[i("span",{class:"line"},[i("span",{style:{"--shiki-dark":"#61AFEF","--shiki-light":"#4078F2"}},"celery"),i("span",{style:{"--shiki-dark":"#D19A66","--shiki-light":"#986801"}}," -A"),i("span",{style:{"--shiki-dark":"#98C379","--shiki-light":"#50A14F"}}," app.task.celery"),i("span",{style:{"--shiki-dark":"#98C379","--shiki-light":"#50A14F"}}," worker"),i("span",{style:{"--shiki-dark":"#D19A66","--shiki-light":"#986801"}}," -l"),i("span",{style:{"--shiki-dark":"#98C379","--shiki-light":"#50A14F"}}," info"),i("span",{style:{"--shiki-dark":"#D19A66","--shiki-light":"#986801"}}," -P"),i("span",{style:{"--shiki-dark":"#98C379","--shiki-light":"#50A14F"}}," threads")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"})])],-1)])]),tab2:e(({value:a,isActive:t})=>[...s[5]||(s[5]=[i("p",null,"任务主要是 I/O 密集型且需要异步操作",-1),i("div",{class:"language-bash line-numbers-mode","data-highlighter":"shiki","data-ext":"bash",style:{"--shiki-dark":"#abb2bf","--shiki-light":"#383A42","--shiki-dark-bg":"#282c34","--shiki-light-bg":"#FAFAFA"}},[i("pre",{class:"shiki shiki-themes one-dark-pro one-light vp-code"},[i("code",{class:"language-bash"},[i("span",{class:"line"},[i("span",{style:{"--shiki-dark":"#61AFEF","--shiki-light":"#4078F2"}},"celery"),i("span",{style:{"--shiki-dark":"#D19A66","--shiki-light":"#986801"}}," -A"),i("span",{style:{"--shiki-dark":"#98C379","--shiki-light":"#50A14F"}}," app.task.celery"),i("span",{style:{"--shiki-dark":"#98C379","--shiki-light":"#50A14F"}}," worker"),i("span",{style:{"--shiki-dark":"#D19A66","--shiki-light":"#986801"}}," -l"),i("span",{style:{"--shiki-dark":"#98C379","--shiki-light":"#50A14F"}}," info"),i("span",{style:{"--shiki-dark":"#D19A66","--shiki-light":"#986801"}}," -P"),i("span",{style:{"--shiki-dark":"#98C379","--shiki-light":"#50A14F"}}," gevent")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"})])],-1)])]),_:1}),s[13]||(s[13]=n('<h3 id="并发数" tabindex="-1"><a class="header-anchor" href="#并发数"><span>并发数</span></a></h3><p>celery 提供了 worker 并发数 <code>-c</code> 设置，参考如下：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-bash"><span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">celery</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> -A</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> app.task.celery</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> worker</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> -l</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> info</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> -P</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> gevent</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> -c</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> 1000</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>',3)),r(h,{id:"110",data:[{id:"prefork"},{id:"threads"},{id:"gevent"}]},{title0:e(({value:a,isActive:t})=>[...s[6]||(s[6]=[l("prefork",-1)])]),title1:e(({value:a,isActive:t})=>[...s[7]||(s[7]=[l("threads",-1)])]),title2:e(({value:a,isActive:t})=>[...s[8]||(s[8]=[l("gevent",-1)])]),tab0:e(({value:a,isActive:t})=>[...s[9]||(s[9]=[i("p",null,"并发数建议设置为 CPU 核心数的 1 到 2 倍",-1)])]),tab1:e(({value:a,isActive:t})=>[...s[10]||(s[10]=[i("p",null,"并发数建议设置为 CPU 核心数的 2 到 10 倍",-1)])]),tab2:e(({value:a,isActive:t})=>[...s[11]||(s[11]=[i("p",null,"并发数建议设置为 100 ～ 1000",-1)])]),_:1}),s[14]||(s[14]=n(`<h3 id="队列" tabindex="-1"><a class="header-anchor" href="#队列"><span>队列</span></a></h3><p>celery 提供了 <code>queue</code>（队列），我们可以在 celery 配置中添加如下代码：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-python"><span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">app.conf.task_queues </span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">=</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> (</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;">    Queue</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&#39;cpu_bind&#39;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">, </span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#986801;--shiki-light-font-style:inherit;">routing_key</span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">=</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&#39;cpu&#39;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">),  </span><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;"># cpu 密集型绑定队列</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;">    Queue</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&#39;io_bind&#39;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">, </span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#986801;--shiki-light-font-style:inherit;">routing_key</span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">=</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&#39;io&#39;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">),    </span><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;"># io 密集型绑定队列</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;">    Queue</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&#39;all_in&#39;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">),                   </span><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;"># 无路由键的简单队列</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启动 worker 时，需要添加 <code>-Q</code> 参数指定队列进行启动，例如：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-bash"><span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">celery</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> -A</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> app.task.celery</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> worker</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> -l</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> info</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> -P</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> gevent</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> -c</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> 1000</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> -Q</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> cpu_bind</span><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">  # 启动 cpu worker</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">celery</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> -A</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> app.task.celery</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> worker</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> -l</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> info</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> -P</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> gevent</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> -c</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> 1000</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> -Q</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> io_bind</span><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">  # 启动 io worker</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，我们就可以像下面这样在任务定义的时候指定队列运行任务了</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-python"><span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">@celery_app</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#986801;--shiki-light-font-style:inherit;">queue</span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">=</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&#39;io_bind&#39;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">)</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">async</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> def</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> io_bind_task</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">():</span></span>
<span class="line"><span style="--shiki-dark:#D19A66;--shiki-light:#383A42;">    ...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7))])}const b=k(g,[["render",y]]),u=JSON.parse('{"path":"/backend/reference/celery.html","title":"celery","lang":"zh-CN","frontmatter":{"title":"celery","description":"Celery 对于绝大数人来讲，学习路线非常曲折，很难以理解其设计的复杂性，加上它不是很优雅的文档（当然，它很全面），让大多数人将其抛之脑后，今天，我们一起来打破障碍，拥抱 celery 为什么选择 Celery? Celery 是一个基于 Python 开发的分布式任务队列系统，它在处理繁重计算或复杂任务具备极好的优势，因为它不会和主线程应用共享进程...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"celery\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-09-21T15:54:42.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://fastapi-practices.github.io/fastapi_best_architecture_docs/fastapi_best_architecture_docs/backend/reference/celery.html"}],["meta",{"property":"og:site_name","content":"FastAPI Best Architecture"}],["meta",{"property":"og:title","content":"celery"}],["meta",{"property":"og:description","content":"Celery 对于绝大数人来讲，学习路线非常曲折，很难以理解其设计的复杂性，加上它不是很优雅的文档（当然，它很全面），让大多数人将其抛之脑后，今天，我们一起来打破障碍，拥抱 celery 为什么选择 Celery? Celery 是一个基于 Python 开发的分布式任务队列系统，它在处理繁重计算或复杂任务具备极好的优势，因为它不会和主线程应用共享进程..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-21T15:54:42.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-21T15:54:42.000Z"}]]},"readingTime":{"minutes":5.24,"words":1572},"git":{"createdTime":1758470082000,"updatedTime":1758470082000},"autoDesc":true,"filePathRelative":"backend/reference/celery.md","headers":[],"bulletin":true}');export{b as comp,u as data};
