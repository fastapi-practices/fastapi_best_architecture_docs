import{_ as s,c as a,f as e,o as t}from"./app-DqtJ7nxx.js";const n={};function h(l,i){return t(),a("div",null,[...i[0]||(i[0]=[e(`<p>在编写中间件之前，我们首先要对中间件有一些了解</p><h2 id="什么是中间件" tabindex="-1"><a class="header-anchor" href="#什么是中间件"><span>什么是中间件？</span></a></h2><p>中间件是一种可以自定义处理请求和响应的机制，这种机制可以自动应用于每个请求;</p><p>工作机制：当在应用程序中发送一个请求时，会在接口路径（可以理解为接口函数）代码执行前获取它，你可以对此请求进行自定义逻辑处理，然后将处理过的请求再交给接口路径继续执行，在接口响应返回前，你也可以提前获取响应，并对响应进行自定义逻辑处理</p><p>在编写自定义中间件时，很多佬可能存在误区，比如：我编写了一个处理请求的普通日志函数，并放到了中间件目录作为中间件；错！这并不是一个中间件，而只是一个工具！它不应该被放到中间件目录，而是应该放到中间件文件中或工具目录中</p><h2 id="如何编写" tabindex="-1"><a class="header-anchor" href="#如何编写"><span>如何编写？</span></a></h2><p>中间件的编写方法有三种</p><h3 id="basehttpmiddleware" tabindex="-1"><a class="header-anchor" href="#basehttpmiddleware"><span>BaseHTTPMiddleware</span></a></h3><p>这种编写方法相对简单</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-python"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">class</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;"> AccessMiddleware</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#C18401;">(</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;">BaseHTTPMiddleware</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#C18401;">)</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">:</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">    async</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> def</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> dispatch</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#E5C07B;--shiki-dark-font-style:italic;--shiki-light:#986801;--shiki-light-font-style:inherit;">self</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span><span style="--shiki-dark:#D19A66;--shiki-dark-font-style:italic;--shiki-light:#986801;--shiki-light-font-style:inherit;"> request</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">:</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#986801;"> Request</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span><span style="--shiki-dark:#D19A66;--shiki-dark-font-style:italic;--shiki-light:#986801;--shiki-light-font-style:inherit;"> call_next</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">:</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#986801;"> RequestResponseEndpoint</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">) -&gt; Response:</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">        start_time </span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">=</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> timezone.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;">now</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">()</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">        response </span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">=</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> await</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;"> call_next</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(request)</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">        end_time </span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">=</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> timezone.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;">now</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">()</span></span>
<span class="line"><span style="--shiki-dark:#56B6C2;--shiki-light:#0184BC;">        print</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">f</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&#39;time: </span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">{</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">end_time </span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">-</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> start_time</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">}</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&#39;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">)</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">        return</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> response</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编写此类中间件，首先，你要继承 <code>BaseHTTPMiddleware</code>，然后重写异步函数：<code>dispatch()</code>，在此函数中，<code>call_next(request)</code> 之前的代码就是接口路径代码执行前的逻辑处理，之后的代码就是在响应被返回前的逻辑处理，最后，返回响应，至此，你已完成编写自定义中间件</p><h3 id="纯-asgi" tabindex="-1"><a class="header-anchor" href="#纯-asgi"><span>纯 ASGI</span></a></h3><p>这种编写方式相对比较复杂</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-python"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">class</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;"> ASGIMiddleware</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">:</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">    def</span><span style="--shiki-dark:#56B6C2;--shiki-light:#0184BC;"> __init__</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#E5C07B;--shiki-dark-font-style:italic;--shiki-light:#986801;--shiki-light-font-style:inherit;">self</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span><span style="--shiki-dark:#D19A66;--shiki-dark-font-style:italic;--shiki-light:#986801;--shiki-light-font-style:inherit;"> app</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">):</span></span>
<span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">        self</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">.app </span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">=</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> app</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">    async</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> def</span><span style="--shiki-dark:#56B6C2;--shiki-light:#0184BC;"> __call__</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#E5C07B;--shiki-dark-font-style:italic;--shiki-light:#986801;--shiki-light-font-style:inherit;">self</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span><span style="--shiki-dark:#D19A66;--shiki-dark-font-style:italic;--shiki-light:#986801;--shiki-light-font-style:inherit;"> scope</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span><span style="--shiki-dark:#D19A66;--shiki-dark-font-style:italic;--shiki-light:#986801;--shiki-light-font-style:inherit;"> receive</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span><span style="--shiki-dark:#D19A66;--shiki-dark-font-style:italic;--shiki-light:#986801;--shiki-light-font-style:inherit;"> send</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">):</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">        await</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;"> self</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;">app</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(scope, receive, send)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里包含 <a href="https://www.starlette.io/middleware/#pure-asgi-middleware" target="_blank" rel="noopener noreferrer">ASGI 规范</a> ，除非经过系统性学习，否则，你不能完成编写此类自定义中间件</p><h3 id="装饰器" tabindex="-1"><a class="header-anchor" href="#装饰器"><span>装饰器</span></a></h3><p>这种方式看起来很好，并且是 fastapi 的官方教程，但这不适用于 fba</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-python"><span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">@app</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#4078F2;">.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">middleware</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&quot;http&quot;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">)</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">async</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> def</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> add_process_time_header</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#D19A66;--shiki-dark-font-style:italic;--shiki-light:#986801;--shiki-light-font-style:inherit;">request</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">:</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#986801;"> Request</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span><span style="--shiki-dark:#D19A66;--shiki-dark-font-style:italic;--shiki-light:#986801;--shiki-light-font-style:inherit;"> call_next</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">):</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">    start_time </span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">=</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> timezone.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;">now</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">()</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">    response </span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">=</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> await</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;"> call_next</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(request)</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">    end_time </span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">=</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> timezone.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;">now</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">()</span></span>
<span class="line"><span style="--shiki-dark:#56B6C2;--shiki-light:#0184BC;">    print</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">f</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&#39;time: </span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">{</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">end_time </span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">-</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> start_time</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">}</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&#39;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">)</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">    return</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> response</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="如何使用" tabindex="-1"><a class="header-anchor" href="#如何使用"><span>如何使用</span></a></h2><p>进入 fba 项目 backend 目录下，找到 <code>core/registrar.py</code>，在此文件中找到 <code>register_middleware()</code> 函数，这是 fba 的中间件注册函数</p><p>在此函数中，<mark>中间件按照从上往下的顺序依次执行</mark>，因此，中间件的顺序非常重要</p><p>上面我们提到过使用装饰器编写中间件，但不适用于 fba，经过查看 fastapi 源码，我们发现，此装饰器的本质就是在内部调用了 <code>add_middleware()</code> 函数，所以，我们可以直接通过 <code>app.add_middleware()</code> 将中间件类添加到应用程序中，这种方式也更符合 fba 当前的编码风格</p>`,22)])])}const p=s(n,[["render",h]]),r=JSON.parse('{"path":"/blog/middleware.html","title":"如何编写自定义中间件?","lang":"zh-CN","frontmatter":{"title":"如何编写自定义中间件?","createTime":"2024-10-31 18:30","tags":["FastAPI"],"description":"在编写中间件之前，我们首先要对中间件有一些了解 什么是中间件？ 中间件是一种可以自定义处理请求和响应的机制，这种机制可以自动应用于每个请求; 工作机制：当在应用程序中发送一个请求时，会在接口路径（可以理解为接口函数）代码执行前获取它，你可以对此请求进行自定义逻辑处理，然后将处理过的请求再交给接口路径继续执行，在接口响应返回前，你也可以提前获取响应，并对...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"如何编写自定义中间件?\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-09-21T15:54:42.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://fastapi-practices.github.io/fastapi_best_architecture_docs/fastapi_best_architecture_docs/blog/middleware.html"}],["meta",{"property":"og:site_name","content":"FastAPI Best Architecture"}],["meta",{"property":"og:title","content":"如何编写自定义中间件?"}],["meta",{"property":"og:description","content":"在编写中间件之前，我们首先要对中间件有一些了解 什么是中间件？ 中间件是一种可以自定义处理请求和响应的机制，这种机制可以自动应用于每个请求; 工作机制：当在应用程序中发送一个请求时，会在接口路径（可以理解为接口函数）代码执行前获取它，你可以对此请求进行自定义逻辑处理，然后将处理过的请求再交给接口路径继续执行，在接口响应返回前，你也可以提前获取响应，并对..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-21T15:54:42.000Z"}],["meta",{"property":"article:tag","content":"FastAPI"}],["meta",{"property":"article:modified_time","content":"2025-09-21T15:54:42.000Z"}]]},"readingTime":{"minutes":2.4,"words":721},"git":{"createdTime":1758470082000,"updatedTime":1758470082000},"autoDesc":true,"filePathRelative":"blog/middleware.md","headers":[],"categoryList":[],"bulletin":true}');export{p as comp,r as data};
