import{_ as l,c as h,a,f as p,h as i,b as e,w as n,r as d,o as r}from"./app-DqtJ7nxx.js";const k="/fastapi_best_architecture_docs/images/sqlalchemy_await_only.png",o={},c={class:"hint-container tip"};function g(y,s){const t=d("VPLink");return r(),h("div",null,[a("div",c,[s[3]||(s[3]=a("p",{class:"hint-container-title"},"提示",-1)),a("p",null,[s[1]||(s[1]=i("如果以下解决方案未能帮助到您，请通过 ",-1)),e(t,{href:"./group.md"},{default:n(()=>[...s[0]||(s[0]=[i("交流群",-1)])]),_:1}),s[2]||(s[2]=i(" 与我们联系",-1))])]),s[6]||(s[6]=p(`<h2 id="返回数据跟数据库对不上" tabindex="-1"><a class="header-anchor" href="#返回数据跟数据库对不上"><span>返回数据跟数据库对不上</span></a></h2><h3 id="非首次部署或反复部署" tabindex="-1"><a class="header-anchor" href="#非首次部署或反复部署"><span>非首次部署或反复部署</span></a></h3><p>若此前已调用过 fba 接口，相关数据可能已悄无声息地写入 Redis 缓存。随后，即便重新部署了 fba，整个部署过程并不会自动清除 Redis 中的缓存数据。</p><p>因此，调用重新部署后的 fba 接口时，若发现返回数据异常，而数据库检查又未发现问题，很可能是缓存未更新导致。此时，手动清理 Redis 中的 fba 缓存即可解决问题，系统将自动恢复正常</p><h3 id="手动修改数据库数据" tabindex="-1"><a class="header-anchor" href="#手动修改数据库数据"><span>手动修改数据库数据</span></a></h3><p>假设我们直接在数据库中修改了某些数据，但调用接口后发现返回结果未发生变化。返回数据可能来源于 Redis 缓存，而通过数据库直接修改的操作不会触发缓存的自动更新。</p><p>因此，返回数据看似未受影响。解决方法是手动清理 Redis 中的相关缓存，之后数据将正确反映修改结果</p><h2 id="can-t-call-await-only-here" tabindex="-1"><a class="header-anchor" href="#can-t-call-await-only-here"><span>Can&#39;t call await_only() here</span></a></h2><div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-json"><span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">{</span></span>
<span class="line"><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">  &quot;code&quot;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">: </span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">500</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span></span>
<span class="line"><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">  &quot;msg&quot;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">: </span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&quot;(sqlalchemy.exc.MissingGreenlet) greenlet_spawn has not been called; can&#39;t call await_only() here. Was IO attempted in an unexpected place?</span><span style="--shiki-dark:#56B6C2;--shiki-light:#0184BC;">\\n</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">[SQL: SELECT sys_dict_data.id AS sys_dict_data_id, sys_dict_data.label AS sys_dict_data_label, sys_dict_data.value AS sys_dict_data_value, sys_dict_data.sort AS sys_dict_data_sort, sys_dict_data.status AS sys_dict_data_status, sys_dict_data.remark AS sys_dict_data_remark, sys_dict_data.type_id AS sys_dict_data_type_id, sys_dict_data.created_time AS sys_dict_data_created_time, sys_dict_data.updated_time AS sys_dict_data_updated_time </span><span style="--shiki-dark:#56B6C2;--shiki-light:#0184BC;">\\n</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">FROM sys_dict_data </span><span style="--shiki-dark:#56B6C2;--shiki-light:#0184BC;">\\n</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">WHERE %s = sys_dict_data.type_id]</span><span style="--shiki-dark:#56B6C2;--shiki-light:#0184BC;">\\n</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">[parameters: [{&#39;%(2071788311008 param)s&#39;: 1}]]</span><span style="--shiki-dark:#56B6C2;--shiki-light:#0184BC;">\\n</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">(Background on this error at: https://sqlalche.me/e/20/xd2s)&quot;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span></span>
<span class="line"><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">  &quot;data&quot;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">: </span><span style="--shiki-dark:#D19A66;--shiki-light:#0184BC;">null</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span></span>
<span class="line"><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">  &quot;trace_id&quot;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">: </span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&quot;89afd9b0f2b8442590661701e2b6b495&quot;</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+k+`" alt="await_only"></p><p>在 SQLAlchemy 2.0 中异步中，关系（relationship）表默认使用 <a href="https://docs.sqlalchemy.org/en/20/glossary.html#term-lazy-loading" target="_blank" rel="noopener noreferrer">懒加载</a>，所以，如果你未在 ORM 语句中添加关联字段的 加载策略，那么关联字段可能被定义为错误（如上图所示），此时如果调用 pydantic / fastapi 序列化，那么将触发字段错误，因为字段本身就是个错误</p><p>可用的解决方案有多种，请阅读 SQLA 官方文档，fba 默认使用 <code>noload()</code> 对此进行处理，例如：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-python"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">return</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> await</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;"> self</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;">select_order</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(  </span></span>
<span class="line"><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">   &#39;id&#39;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span></span>
<span class="line"><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">   &#39;desc&#39;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span></span>
<span class="line"><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#986801;--shiki-light-font-style:inherit;">   load_options</span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">=</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">[</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;">       selectinload</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">self</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">.model.dept).</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;">options</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;" class="highlighted-word">noload</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(Dept.parent), </span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;" class="highlighted-word">noload</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(Dept.children), </span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;" class="highlighted-word">noload</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(Dept.users)),</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;">       selectinload</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">self</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">.model.roles).</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;">options</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;" class="highlighted-word">noload</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(Role.users), </span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;" class="highlighted-word">noload</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(Role.menus), </span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;" class="highlighted-word">noload</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(Role.scopes)),</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">   ],</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">   **filters,</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="postgresql-主键自增失败" tabindex="-1"><a class="header-anchor" href="#postgresql-主键自增失败"><span>PostgreSQL 主键自增失败</span></a></h2><p>当通过 sql 脚本执行插入数据后，由于 pg 特性，序列值不会与表中最大值同步，此时如果通过代码执行写入操作，可能触发 <code>DETAIL: Key (id)=(x) already exists</code> 的错误</p><p>解决方案请自行浏览器搜索：如何重置 pg 主键序列？</p><h2 id="数据库时区陷阱" tabindex="-1"><a class="header-anchor" href="#数据库时区陷阱"><span>数据库时区陷阱</span></a></h2>`,17)),a("p",null,[s[5]||(s[5]=i("MySQL 不支持时区存储类型，而 PostgreSQL 拥有完美的时区类型，所以在数据库中存储时间列确实是一件令人头疼的事情，不过我们已经实现完美方案，兼容 pgsql 和 mysql，",-1)),e(t,{href:"./backend/reference/timezone.md"},{default:n(()=>[...s[4]||(s[4]=[i("查看详情",-1)])]),_:1})])])}const B=l(o,[["render",g]]),_=JSON.parse('{"path":"/questions.html","title":"常见问题","lang":"zh-CN","frontmatter":{"title":"常见问题","description":"提示 如果以下解决方案未能帮助到您，请通过 与我们联系 返回数据跟数据库对不上 非首次部署或反复部署 若此前已调用过 fba 接口，相关数据可能已悄无声息地写入 Redis 缓存。随后，即便重新部署了 fba，整个部署过程并不会自动清除 Redis 中的缓存数据。 因此，调用重新部署后的 fba 接口时，若发现返回数据异常，而数据库检查又未发现问题，很...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"常见问题\\",\\"image\\":[\\"https://fastapi-practices.github.io/fastapi_best_architecture_docs/fastapi_best_architecture_docs/images/sqlalchemy_await_only.png\\"],\\"dateModified\\":\\"2025-08-27T08:09:42.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://fastapi-practices.github.io/fastapi_best_architecture_docs/fastapi_best_architecture_docs/questions.html"}],["meta",{"property":"og:site_name","content":"FastAPI Best Architecture"}],["meta",{"property":"og:title","content":"常见问题"}],["meta",{"property":"og:description","content":"提示 如果以下解决方案未能帮助到您，请通过 与我们联系 返回数据跟数据库对不上 非首次部署或反复部署 若此前已调用过 fba 接口，相关数据可能已悄无声息地写入 Redis 缓存。随后，即便重新部署了 fba，整个部署过程并不会自动清除 Redis 中的缓存数据。 因此，调用重新部署后的 fba 接口时，若发现返回数据异常，而数据库检查又未发现问题，很..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://fastapi-practices.github.io/fastapi_best_architecture_docs/fastapi_best_architecture_docs/images/sqlalchemy_await_only.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-27T08:09:42.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-27T08:09:42.000Z"}]]},"readingTime":{"minutes":2.34,"words":703},"git":{"createdTime":1742227505000,"updatedTime":1756282182000},"autoDesc":true,"filePathRelative":"questions.md","headers":[],"bulletin":true}');export{B as comp,_ as data};
