import{_ as s,c as e,f as a,o as t}from"./app-DqtJ7nxx.js";const n={};function h(r,i){return t(),e("div",null,[...i[0]||(i[0]=[a(`<p>在 FastAPI 官方高级安全教程中，为我们介绍了两种授权方式，分别是 OAuth2 scopes 和 HTTP Basic Auth，两种方式都可以实现 Swagger 文档授权，并且可以在文档界面通过直接登录的方式进行快捷授权</p><p>以上两种方式虽然可以实现文档内快捷验证，但是它们都使用了表单登录方式，这对于我们来说，并不是一个理想的方案，所以我们在 fba 中使用了 HTTPBearer，这种方式相对于前两种，不够便捷，但同样可以实现文档内自动授权，需要我们先访问登录接口获取 token，然后填入即可</p><h2 id="为什么是-bearer-token" tabindex="-1"><a class="header-anchor" href="#为什么是-bearer-token"><span>为什么是 Bearer Token?</span></a></h2><p>在实际工作中，诸多情况可能都不会使用 bearer token 这种方式，虽然，很多的系统也在使用 token 进行授权，但往往授权方式五花八门，那为什么是 bearer token？答案是，没有为什么，这只是一种标准方案，可参考文档：<a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication#authentication_schemes" target="_blank" rel="noopener noreferrer">Authentication Schemas </a></p><p>对于我们常规使用的接口工具，例如 Postman、APIfox 等来讲，它们也都实现了 bearer 这种标准授权方式，可以轻松实现自动授权，具体请以官方教程为准</p><h2 id="自定义-token-授权方式" tabindex="-1"><a class="header-anchor" href="#自定义-token-授权方式"><span>自定义 Token 授权方式</span></a></h2><p>好了，上面扯了那么多，回到正题，如何使用非 bearer token 这种方式，而是设置一个自定义请求头实现授权（这里插一句，本身，怎么实现对于后端来说无所谓，如果前端要求 xxx 实现授权才行，那纯属它们懒，如果是技术规格要求，那就再议）</p><p>首先，进入 <code>backend/common/security/jwt.py</code> 文件中，找到 <code>DependsJwtAuth = Depends(HTTPBearer())</code>，将 <code>HTTPBearer()</code> 替换为 <code>APIKeyHeader(name=&#39;xxx&#39;)</code>，name 就是我们的自定义请求头 key；由于我们使用的是 bearer 方式，你还需要修改同文件下的 <code>get_token()</code> 方法，如下所示：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-python"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">def</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> get_token</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#D19A66;--shiki-dark-font-style:italic;--shiki-light:#986801;--shiki-light-font-style:inherit;">request</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">:</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#986801;"> Request</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">) -&gt; </span><span style="--shiki-dark:#56B6C2;--shiki-light:#0184BC;">str</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">:</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">    authorization </span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">=</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> request.headers.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;">get</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&#39;xxx&#39;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">)  </span><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;"># name</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">    if</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> not</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> authorization:</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">        raise</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;"> TokenError</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#986801;--shiki-light-font-style:inherit;">msg</span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">=</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&#39;Token 无效&#39;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">)</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">    return</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> token</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改 JWT 中间件，如下所示：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-python"><span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;"># 删除以下代码</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">scheme, token </span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">=</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;"> get_authorization_scheme_param</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(token)</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">if</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> scheme.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;">lower</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">() </span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">!=</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> &#39;bearer&#39;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">:</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">    return</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>至此，你已完成自定义 token 授权，在文档中进行授权时，同样需要你需要先登录获取 token，然后填入</p><p>但是这种授权方式，对于接口工具来讲，我们则需要手动在请求头中加入 token，而无法实现自动授权，所以，个人还是比较建议使用标准实施</p>`,13)])])}const k=s(n,[["render",h]]),p=JSON.parse('{"path":"/blog/header-token.html","title":"如何使用自定义 header token 实现授权？","lang":"zh-CN","frontmatter":{"title":"如何使用自定义 header token 实现授权？","createTime":"2025-03-09 18:00","tags":["FastAPI"],"description":"在 FastAPI 官方高级安全教程中，为我们介绍了两种授权方式，分别是 OAuth2 scopes 和 HTTP Basic Auth，两种方式都可以实现 Swagger 文档授权，并且可以在文档界面通过直接登录的方式进行快捷授权 以上两种方式虽然可以实现文档内快捷验证，但是它们都使用了表单登录方式，这对于我们来说，并不是一个理想的方案，所以我们在 ...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"如何使用自定义 header token 实现授权？\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-10-11T05:42:19.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://fastapi-practices.github.io/fastapi_best_architecture_docs/fastapi_best_architecture_docs/blog/header-token.html"}],["meta",{"property":"og:site_name","content":"FastAPI Best Architecture"}],["meta",{"property":"og:title","content":"如何使用自定义 header token 实现授权？"}],["meta",{"property":"og:description","content":"在 FastAPI 官方高级安全教程中，为我们介绍了两种授权方式，分别是 OAuth2 scopes 和 HTTP Basic Auth，两种方式都可以实现 Swagger 文档授权，并且可以在文档界面通过直接登录的方式进行快捷授权 以上两种方式虽然可以实现文档内快捷验证，但是它们都使用了表单登录方式，这对于我们来说，并不是一个理想的方案，所以我们在 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-11T05:42:19.000Z"}],["meta",{"property":"article:tag","content":"FastAPI"}],["meta",{"property":"article:modified_time","content":"2025-10-11T05:42:19.000Z"}]]},"readingTime":{"minutes":2.17,"words":651},"git":{"createdTime":1758470082000,"updatedTime":1760161339000},"autoDesc":true,"filePathRelative":"blog/header-token.md","headers":[],"categoryList":[],"bulletin":true}');export{k as comp,p as data};
