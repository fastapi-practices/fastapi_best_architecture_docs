import{_ as i,c as e,f as a,o as n}from"./app-DqtJ7nxx.js";const t={};function h(l,s){return n(),e("div",null,[...s[0]||(s[0]=[a(`<p>默认情况下，如果将数据库引擎参数 <code>echo</code> 设置为 True，你将会看到事务总是被开启，即便那是一个查询语句。但这并不是因为我们错误的使用了 SQLAlchemy，你可以查看 <a href="https://github.com/sqlalchemy/sqlalchemy/discussions/6921" target="_blank" rel="noopener noreferrer">#6921</a>、<a href="https://github.com/sqlalchemy/sqlalchemy/discussions/12782" target="_blank" rel="noopener noreferrer">#12782</a> 了解详情</p><details class="hint-container details"><summary>简要总结</summary><p>任何遵循 <a href="https://peps.python.org/pep-0249" target="_blank" rel="noopener noreferrer">PEP-429</a> 进行设计的 Python 数据库连接器或 ORM，都将默认开启事务</p><p>在 SQLAlchemy 中，你可以选择不使用它自身的事务模式，但这需要将数据库本身的事务隔离级别设置为 <code>AUTOCOMMIT</code> ，详情请查看: <a href="https://docs.sqlalchemy.org.cn/en/20/core/connections.html#understanding-the-dbapi-level-autocommit-isolation-level" target="_blank" rel="noopener noreferrer">了解 DBAPI 级别的 Autocommit 隔离级别</a></p></details><h2 id="session-生成器" tabindex="-1"><a class="header-anchor" href="#session-生成器"><span>Session 生成器</span></a></h2><p>这是一种类似于官方文档的使用方法，但这种方法并没有真正达到事务的目的，因为它不会自动执行提交，所以，你可以将它理解为仅适用于查询，否则，必须手动执行 <code>commit()</code> 方法</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-python"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">async</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> def</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> get_db</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">() -&gt; AsyncGenerator[AsyncSession, </span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">None</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">]:</span></span>
<span class="line"><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">    &quot;&quot;&quot;获取数据库会话&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">    async</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> with</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;"> async_db_session</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">() </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">as</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> session:</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">        yield</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> session</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">        </span></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;"># Session Annotated</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">CurrentSession </span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">=</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> Annotated[AsyncSession, </span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;">Depends</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(get_db)]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种方法通常直接应用于接口函数，在 session 应用方面，它被认为是线程安全的</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-python"><span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">@router</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#4078F2;">.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">get</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&#39;&#39;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">)</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">async</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> def</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> get_pagination_apis</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#D19A66;--shiki-dark-font-style:italic;--shiki-light:#986801;--shiki-light-font-style:inherit;">db</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">:</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#986801;"> CurrentSession</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">) -&gt; ResponseModel:</span></span>
<span class="line"><span style="--shiki-dark:#D19A66;--shiki-light:#383A42;">    ...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="begin" tabindex="-1"><a class="header-anchor" href="#begin"><span><code>begin()</code></span></a></h2><p>这种方式由 SQLAlchemy 官方实现，在线程安全方面，由于在同一个函数中，可能存在多次调用，所以没有 Session 生成器严谨</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-python"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">async</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> def</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> create</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(*</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#986801;">, </span><span style="--shiki-dark:#D19A66;--shiki-dark-font-style:italic;--shiki-light:#986801;--shiki-light-font-style:inherit;">obj</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">:</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#986801;"> CreateIns</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">) -&gt; </span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">None</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">:</span></span>
<span class="line highlighted"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">    async</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> with</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> async_db_session.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;">begin</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">() </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">as</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> db:</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">        await</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> xxx_dao.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;">create</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(db, obj)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="如何选择" tabindex="-1"><a class="header-anchor" href="#如何选择"><span>如何选择？</span></a></h2><p>以上两种方法，我们更推荐使用 <code>begin()</code>，理由如下：</p><ol><li>对于 fba 来说，它更加符合架构风格，并且也能减少千篇一律的接口参数（纯作者强迫症）</li><li>而对于无需使用自动提交的事务，我们只需将 <code>begin()</code> 方法去掉，直接使用 <code>async_db_session()</code> 即可</li></ol>`,13)])])}const p=i(t,[["render",h]]),k=JSON.parse('{"path":"/backend/reference/transaction.html","title":"SQLA 事务","lang":"zh-CN","frontmatter":{"title":"SQLA 事务","description":"默认情况下，如果将数据库引擎参数 echo 设置为 True，你将会看到事务总是被开启，即便那是一个查询语句。但这并不是因为我们错误的使用了 SQLAlchemy，你可以查看 #6921、#12782 了解详情 简要总结 任何遵循 PEP-429 进行设计的 Python 数据库连接器或 ORM，都将默认开启事务 在 SQLAlchemy 中，你可以选...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"SQLA 事务\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-08-14T16:09:06.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://fastapi-practices.github.io/fastapi_best_architecture_docs/fastapi_best_architecture_docs/backend/reference/transaction.html"}],["meta",{"property":"og:site_name","content":"FastAPI Best Architecture"}],["meta",{"property":"og:title","content":"SQLA 事务"}],["meta",{"property":"og:description","content":"默认情况下，如果将数据库引擎参数 echo 设置为 True，你将会看到事务总是被开启，即便那是一个查询语句。但这并不是因为我们错误的使用了 SQLAlchemy，你可以查看 #6921、#12782 了解详情 简要总结 任何遵循 PEP-429 进行设计的 Python 数据库连接器或 ORM，都将默认开启事务 在 SQLAlchemy 中，你可以选..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-14T16:09:06.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-14T16:09:06.000Z"}]]},"readingTime":{"minutes":1.58,"words":473},"git":{"createdTime":1726995109000,"updatedTime":1755187746000},"autoDesc":true,"filePathRelative":"backend/reference/transaction.md","headers":[],"bulletin":true}');export{p as comp,k as data};
