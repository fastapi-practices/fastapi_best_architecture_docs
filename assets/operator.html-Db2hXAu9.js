import{_ as s,c as a,f as e,o as t}from"./app-DqtJ7nxx.js";const n={};function h(p,i){return t(),a("div",null,[...i[0]||(i[0]=[e(`<p>我们常见的后台管理系统中，经常会有一些比如创建人，更新人这类的信息，那这些信息是如何做的呢？下面我们就来讲一讲我们在 fba 中应该如何集成操作人信息</p><p>在 fba 中，并没有默认集成操作人员信息到各个数据库表，但是我们提供了非常简易的集成方式：Mixin 类</p><h2 id="如何集成" tabindex="-1"><a class="header-anchor" href="#如何集成"><span>如何集成？</span></a></h2><p>打开 fba 项目 backend 目录，进入 <code>common/model.py</code> 文件中，你会看到 <code>UserMixin</code> 类就冰冷冷的站在那里，因为 fba 没有使用它，而只是保留它；</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-python"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">class</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;"> UserMixin</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#C18401;">(</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;">MappedAsDataclass</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#C18401;">)</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">:</span></span>
<span class="line"><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">    &quot;&quot;&quot;用户 Mixin 数据类&quot;&quot;&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">    created_by: Mapped[</span><span style="--shiki-dark:#56B6C2;--shiki-light:#0184BC;">int</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">] </span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">=</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;"> mapped_column</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#986801;--shiki-light-font-style:inherit;">sort_order</span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">=</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">998</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">, </span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#986801;--shiki-light-font-style:inherit;">comment</span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">=</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&#39;创建者&#39;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">)</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">    updated_by: Mapped[</span><span style="--shiki-dark:#56B6C2;--shiki-light:#0184BC;">int</span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;"> |</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> None</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">] </span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">=</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;"> mapped_column</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#986801;--shiki-light-font-style:inherit;">init</span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">=</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">False</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">, </span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#986801;--shiki-light-font-style:inherit;">default</span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">=</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">None</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">, </span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#986801;--shiki-light-font-style:inherit;">sort_order</span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">=</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">998</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">, </span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#986801;--shiki-light-font-style:inherit;">comment</span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">=</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&#39;修改者&#39;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="如何使用" tabindex="-1"><a class="header-anchor" href="#如何使用"><span>如何使用？</span></a></h2><p>首先，<code>UserMixin</code> 类所存储的信息只是用户的 id ，这也是一种常见的做法，那么问题来了：我该如何获取用户 id 并存储？ 我在后台展示的时候，肯定不能展示 id 吧？容我一一解答</p><h3 id="如何获取用户-id-并存储" tabindex="-1"><a class="header-anchor" href="#如何获取用户-id-并存储"><span>如何获取用户 id 并存储</span></a></h3><p>我们 fba 的绝明之处，就是充分利用了请求上下文功能，我们通过 JWT 中间件将用户信息存储到了每个请求的上下文中，后面我们会展开详细讲解 JWT 中间件，然后，我们就可以很轻松的通过 request 对象读取用户信息，在 Django，flask 等 Web 框架中， request 都是常驻嘉宾</p><p>首先，在接口函数中，我们要像 Django/flask 一样，第一个参数写为 request，最好，我们加上参数类型：<code>request: Request</code> ，然后我们可以在接口函数中通过 <code>request.user.id</code> 轻松获取当前操作人员 id ，这样，在存储的时候，此 id 就可以作为存储数据被添加到 schema 或字典中</p><h3 id="我在后台展示的时候-肯定不能展示-id-吧" tabindex="-1"><a class="header-anchor" href="#我在后台展示的时候-肯定不能展示-id-吧"><span>我在后台展示的时候，肯定不能展示 id 吧</span></a></h3><p>当然不能，那该怎么办呢？虽然我们只存储了用户 id 到数据库，但当我们单查询或列表查询的时候，我们需要进行数据拦截，将 id 替换为 username；</p><p>这会涉及到另外的问题，username 从哪里来？考虑到性能影响，我们如果每次都遍历这些 id 去查询数据库进行替换，无疑是增加了大量 IO 操作，因此，我们可以埋点（新用户注册后，查询用户列表时...）将所有用户 id 和 username 缓存到 redis，替换的时候就直接读取缓存</p><h2 id="直接存成-username-不更好么" tabindex="-1"><a class="header-anchor" href="#直接存成-username-不更好么"><span>直接存成 username 不更好么？</span></a></h2><p>当然可以，你可以直接修改 <code>UserMixin</code> 存为字符串，然后直接通过 <code>request.user.username</code> 存储用户名，这样查询出来就直接是用户名，从而无需再进行替换操作</p><h2 id="到底存什么" tabindex="-1"><a class="header-anchor" href="#到底存什么"><span>到底存什么？</span></a></h2><p>用 id 还是用 username，取决于业务场景；如果需要总是显示最新用户信息，避免用户更新用户名之后还需要更新所有历史数据，则使用 id，如果 username 是唯一的，并且需要保留历史痕迹，直接用 username 即可</p>`,17)])])}const r=s(n,[["render",h]]),d=JSON.parse('{"path":"/backend/reference/operator.html","title":"操作人","lang":"zh-CN","frontmatter":{"title":"操作人","description":"我们常见的后台管理系统中，经常会有一些比如创建人，更新人这类的信息，那这些信息是如何做的呢？下面我们就来讲一讲我们在 fba 中应该如何集成操作人信息 在 fba 中，并没有默认集成操作人员信息到各个数据库表，但是我们提供了非常简易的集成方式：Mixin 类 如何集成？ 打开 fba 项目 backend 目录，进入 common/model.py 文...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"操作人\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-09-21T15:54:42.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://fastapi-practices.github.io/fastapi_best_architecture_docs/fastapi_best_architecture_docs/backend/reference/operator.html"}],["meta",{"property":"og:site_name","content":"FastAPI Best Architecture"}],["meta",{"property":"og:title","content":"操作人"}],["meta",{"property":"og:description","content":"我们常见的后台管理系统中，经常会有一些比如创建人，更新人这类的信息，那这些信息是如何做的呢？下面我们就来讲一讲我们在 fba 中应该如何集成操作人信息 在 fba 中，并没有默认集成操作人员信息到各个数据库表，但是我们提供了非常简易的集成方式：Mixin 类 如何集成？ 打开 fba 项目 backend 目录，进入 common/model.py 文..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-21T15:54:42.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-21T15:54:42.000Z"}]]},"readingTime":{"minutes":2.6,"words":781},"git":{"createdTime":1758470082000,"updatedTime":1758470082000},"autoDesc":true,"filePathRelative":"backend/reference/operator.md","headers":[],"bulletin":true}');export{r as comp,d as data};
