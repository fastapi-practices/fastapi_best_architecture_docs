import{_ as s,c as a,f as e,o as t}from"./app-DqtJ7nxx.js";const n={};function l(h,i){return t(),a("div",null,[...i[0]||(i[0]=[e(`<p>在构建现代 Web 应用时，安全认证是不可或缺的一环。今天，让我们一起来看看 fba 项目中的 JWT 认证中间件： <code>backend/middleware/jwt_auth_middleware.py</code> 的实现，这将是我们在企业级项目中可应用的最佳实践</p><h2 id="它解决了什么问题" tabindex="-1"><a class="header-anchor" href="#它解决了什么问题"><span>它解决了什么问题？</span></a></h2><p>如果你正在开发一个需要用户登录的 API 服务，你需要：</p><ul><li>验证用户身份</li><li>保护敏感接口</li><li>在请求间保持用户状态</li><li>优雅地处理认证失败</li><li>......</li></ul><p>传统方案往往需要你在每个接口中重复编写认证逻辑，或者使用装饰器来包装路由函数，而我们的 JWT 中间件则提供了一种更优雅的集成方式：一次配置，全局生效</p><h2 id="如何使用它" tabindex="-1"><a class="header-anchor" href="#如何使用它"><span>如何使用它？</span></a></h2><p>例如在 fba 中，我们提供了中间件的统一注册入口：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-python"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">def</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> register_middleware</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#D19A66;--shiki-dark-font-style:italic;--shiki-light:#986801;--shiki-light-font-style:inherit;">app</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">:</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#986801;"> FastAPI</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">) -&gt; </span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">None</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">:</span></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">    # ...其他中间件</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">    app.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;">add_middleware</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">        AuthenticationMiddleware,  </span><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;"># 来自 starlette 的认证中间件</span></span>
<span class="line"><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#986801;--shiki-light-font-style:inherit;">        backend</span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">=</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;">JwtAuthMiddleware</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(),  </span><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;"># 重写为自定义中间件</span></span>
<span class="line"><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#986801;--shiki-light-font-style:inherit;">        on_error</span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">=</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">JwtAuthMiddleware.auth_exception_handler,  </span><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;"># 重写为自定义错误</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">    )</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在你的路由函数中，就可以直接通过 <code>request.user</code> 获取当前登录用户的信息，如下所示：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-python"><span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">@router</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#4078F2;">.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">get</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&quot;/profile&quot;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">)</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">async</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> def</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> get_profile</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#D19A66;--shiki-dark-font-style:italic;--shiki-light:#986801;--shiki-light-font-style:inherit;">request</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">:</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#986801;"> Request</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">):</span></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">    # 用户信息已经由中间件注入到请求对象中</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">    current_user </span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">=</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> request.user</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">    return</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> {</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&quot;user&quot;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">: current_user}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以看到，既没有繁琐的依赖注入，也没有重复的认证代码，一切都变得如此简洁</p><h2 id="与-fastapi-官方实现的不同之处" tabindex="-1"><a class="header-anchor" href="#与-fastapi-官方实现的不同之处"><span>与 FastAPI 官方实现的不同之处</span></a></h2><p>FastAPI 官方推荐使用 <code>OAuth2PasswordBearer</code> 和依赖注入系统来实现 JWT 认证</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-python"><span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">oauth2_scheme </span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">=</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;"> OAuth2PasswordBearer</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#986801;--shiki-light-font-style:inherit;">tokenUrl</span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">=</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&quot;token&quot;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">@router</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#4078F2;">.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">get</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&quot;/users/me&quot;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">)</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">async</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> def</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> get_profile</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#D19A66;--shiki-dark-font-style:italic;--shiki-light:#986801;--shiki-light-font-style:inherit;">current_user</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">:</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#986801;"> User </span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">=</span><span style="--shiki-dark:#61AFEF;--shiki-light:#986801;"> Depends</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#986801;">(get_current_user)</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">):</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">    return</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> current_user</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这与我们的 JWT 认证中间件相比吗，看起来只是少了几行代码，但背后的差异却很大：</p><ol><li><strong>全局一致性</strong> ：中间件确保了所有请求都经过相同的认证流程，避免了遗漏</li><li><strong>错误处理统一</strong> ：自定义的错误处理器确保了所有认证失败都返回一致的响应格式</li><li><strong>代码简洁</strong> ：路由函数不再需要显式依赖认证逻辑，关注点更加分离</li><li><strong>灵活扩展</strong> ：中间件架构使得添加新的认证方式或权限检查变得简单</li></ol><h2 id="为什么推荐-jwt-中间件" tabindex="-1"><a class="header-anchor" href="#为什么推荐-jwt-中间件"><span>为什么推荐 JWT 中间件？</span></a></h2><p>在实际项目中，这种基于中间件的 JWT 认证方案有几个明显优势：</p><h3 id="对开发者友好" tabindex="-1"><a class="header-anchor" href="#对开发者友好"><span>对开发者友好</span></a></h3><p>fba 一向注重在这方面考量，而使用此中间件，新加入团队的开发者就不再需要了解复杂的认证机制，只需知道 <code>request.user</code> 中包含当前用户信息即可。这大大降低了入门门槛，减少了潜在的安全漏洞</p><h3 id="统一的错误处理" tabindex="-1"><a class="header-anchor" href="#统一的错误处理"><span>统一的错误处理</span></a></h3><p>所有认证相关的错误都通过同一个处理器处理，确保了 API 响应的一致性。无论是 Token 过期还是格式错误，客户端都能收到格式统一的错误信息</p><h3 id="性能考量" tabindex="-1"><a class="header-anchor" href="#性能考量"><span>性能考量</span></a></h3><p>中间件只在必要时执行认证逻辑，对于白名单中的路径（如登录接口、健康检查...）会自动跳过，避免了不必要的性能开销，并且还使用 Redis 和 Rust 库对用户信息进行缓存和解析，使其性能影响尽可能降到最低</p><h2 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项"><span>注意事项</span></a></h2><p>这个中间件设计得足够灵活，可以根据项目需求进行多种扩展，但中间件会应用于每个 API 请求（非认证请求和白名单 API 除外），所以一定要考虑扩展功能的适用性和性能</p>`,26)])])}const p=s(n,[["render",l]]),k=JSON.parse('{"path":"/blog/jwt-middleware.html","title":"为什么要用 JWT 认证中间件？","lang":"zh-CN","frontmatter":{"title":"为什么要用 JWT 认证中间件？","createTime":"2025-06-15 17:42","tags":["FastAPI"],"description":"在构建现代 Web 应用时，安全认证是不可或缺的一环。今天，让我们一起来看看 fba 项目中的 JWT 认证中间件： backend/middleware/jwt_auth_middleware.py 的实现，这将是我们在企业级项目中可应用的最佳实践 它解决了什么问题？ 如果你正在开发一个需要用户登录的 API 服务，你需要： 验证用户身份 保护敏感接...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"为什么要用 JWT 认证中间件？\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-10-11T05:42:19.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://fastapi-practices.github.io/fastapi_best_architecture_docs/fastapi_best_architecture_docs/blog/jwt-middleware.html"}],["meta",{"property":"og:site_name","content":"FastAPI Best Architecture"}],["meta",{"property":"og:title","content":"为什么要用 JWT 认证中间件？"}],["meta",{"property":"og:description","content":"在构建现代 Web 应用时，安全认证是不可或缺的一环。今天，让我们一起来看看 fba 项目中的 JWT 认证中间件： backend/middleware/jwt_auth_middleware.py 的实现，这将是我们在企业级项目中可应用的最佳实践 它解决了什么问题？ 如果你正在开发一个需要用户登录的 API 服务，你需要： 验证用户身份 保护敏感接..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-11T05:42:19.000Z"}],["meta",{"property":"article:tag","content":"FastAPI"}],["meta",{"property":"article:modified_time","content":"2025-10-11T05:42:19.000Z"}]]},"readingTime":{"minutes":3.1,"words":931},"git":{"createdTime":1758470728000,"updatedTime":1760161339000},"autoDesc":true,"filePathRelative":"blog/jwt-middleware.md","headers":[],"categoryList":[],"bulletin":true}');export{p as comp,k as data};
