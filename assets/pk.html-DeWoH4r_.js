import{_ as h,c as r,f as d,a as i,b as k,w as a,r as p,o,h as e}from"./app-DqtJ7nxx.js";const c={};function y(g,s){const n=p("Tabs");return o(),r("div",null,[s[9]||(s[9]=d('<p>我们在 fba 中为数据库主键添加了两种选择，分别为传统模式（自增 ID）和雪花算法（雪花 ID），<mark class="note">我们在全局范围内使用 <code>自增 ID</code> 作为主键的默认声明方式</mark></p><p>在切换主键声明方式之前，让我们先来简单了解一下它们的特性，再决定是否需要切换</p><h2 id="自增-id" tabindex="-1"><a class="header-anchor" href="#自增-id"><span>自增 ID</span></a></h2><h3 id="优点" tabindex="-1"><a class="header-anchor" href="#优点"><span>优点</span></a></h3><ul><li>简单易用</li><li>数据库原生支持</li><li>生成顺序递增</li><li>查询效率高</li><li>占用空间小</li></ul><h3 id="局限性" tabindex="-1"><a class="header-anchor" href="#局限性"><span>局限性</span></a></h3><ul><li>在分布式系统中可能出现 ID 冲突，扩展性较差</li><li>ID 生成依赖数据库，性能瓶颈风险较高</li><li>ID 可预测，可能暴露业务数据量或存在安全隐患</li></ul><h2 id="雪花-id" tabindex="-1"><a class="header-anchor" href="#雪花-id"><span>雪花 ID</span></a></h2><h3 id="优点-1" tabindex="-1"><a class="header-anchor" href="#优点-1"><span>优点</span></a></h3><ul><li>分布式环境友好</li><li>ID 全局唯一且无需依赖中央数据库</li><li>包含时间戳，生成 ID 天然有序，便于排序和查询</li></ul><h3 id="局限性-1" tabindex="-1"><a class="header-anchor" href="#局限性-1"><span>局限性</span></a></h3><ul><li>实现复杂，需额外维护生成器</li><li>可能因时间回拨（如服务器时钟同步问题）导致无法新增数据</li><li>ID 长度较长，存储和传输成本略高</li></ul><h2 id="适用场景" tabindex="-1"><a class="header-anchor" href="#适用场景"><span>适用场景</span></a></h2><h3 id="自增-id-1" tabindex="-1"><a class="header-anchor" href="#自增-id-1"><span>自增 ID</span></a></h3><p>单机或中小规模应用，业务简单且对 ID 可预测性无敏感</p><h3 id="雪花-id-1" tabindex="-1"><a class="header-anchor" href="#雪花-id-1"><span>雪花 ID</span></a></h3><p>分布式系统、微服务架构，或需要高并发、跨地域生成唯一 ID</p><h2 id="切换选择" tabindex="-1"><a class="header-anchor" href="#切换选择"><span>切换选择</span></a></h2><h3 id="自增-id-2" tabindex="-1"><a class="header-anchor" href="#自增-id-2"><span>自增 ID</span></a></h3><p>无需切换，这是 fba 内的全局默认声明方式</p><h3 id="雪花-id-2" tabindex="-1"><a class="header-anchor" href="#雪花-id-2"><span>雪花 ID</span></a></h3><ol><li>更新 fba 内所有 sqlalchemy model 中的 <code>id: Mapped[id_key]</code> 为 <code>id: Mapped[snowflake_id_key]</code></li><li>更新所有 <code>id_key</code> 导入为 <code>snowflake_id_key</code></li><li>执行 <code>backend/sql/init_snowflake_test_data.sql</code> 脚本初始化测试数据</li></ol><div class="hint-container caution"><p class="hint-container-title">Windows 平台警告</p><p>如果您正在 Windows 平台中使用 mysql &gt;= 8.0，还需要更新 <code>backend/database/db.py</code> 文件内的 <code>mysql+asyncmy</code> 为 <code>mysql+aiomysql</code>，否则，您将无法在本地正常新增数据。相关 issue：<a href="https://github.com/long2ice/asyncmy/issues/35" target="_blank" rel="noopener noreferrer">asyncmy/issues/35</a></p></div><h2 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项"><span>注意事项</span></a></h2>',24)),i("ul",null,[s[7]||(s[7]=i("li",null,[i("p",null,"使用雪花 ID 时，需确保时钟同步（如通过 NTP）和节点 ID 的唯一性分配")],-1)),s[8]||(s[8]=i("li",null,[i("p",null,"传统自增 ID 在数据迁移或合并时需特别注意冲突问题")],-1)),i("li",null,[s[4]||(s[4]=i("p",null,[i("mark",{class:"danger"},"前端渲染长整数偏移")],-1)),s[5]||(s[5]=i("p",null,"当后端 api 返回长整数时，返回结果是没有问题的，但是通过前端渲染数据后，可能导致长整数渲染错误。",-1)),s[6]||(s[6]=i("p",null,"通过浏览器控制台可以发现，前端渲染后的数据 id 与返回数据不一致，最佳解决方法是：后端将长整数序列化为字符串之后再返回",-1)),k(n,{id:"175",data:[{id:"schemaBase"},{id:"GetXxxDetail / GetXxxTree"}]},{title0:a(({value:t,isActive:l})=>[...s[0]||(s[0]=[e("schemaBase",-1)])]),title1:a(({value:t,isActive:l})=>[...s[1]||(s[1]=[e("GetXxxDetail / GetXxxTree",-1)])]),tab0:a(({value:t,isActive:l})=>[...s[2]||(s[2]=[i("div",{class:"language-python line-numbers-mode","data-highlighter":"shiki","data-ext":"python",style:{"--shiki-dark":"#abb2bf","--shiki-light":"#383A42","--shiki-dark-bg":"#282c34","--shiki-light-bg":"#FAFAFA"}},[i("pre",{class:"shiki shiki-themes one-dark-pro one-light vp-code"},[i("code",{class:"language-python"},[i("span",{class:"line"},[i("span",{style:{"--shiki-dark":"#61AFEF","--shiki-light":"#4078F2"}},"@field_serializer"),i("span",{style:{"--shiki-dark":"#ABB2BF","--shiki-light":"#383A42"}},"("),i("span",{style:{"--shiki-dark":"#98C379","--shiki-light":"#50A14F"}},"'id'"),i("span",{style:{"--shiki-dark":"#ABB2BF","--shiki-light":"#383A42"}},","),i("span",{style:{"--shiki-dark":"#E06C75","--shiki-dark-font-style":"italic","--shiki-light":"#986801","--shiki-light-font-style":"inherit"}}," check_fields"),i("span",{style:{"--shiki-dark":"#56B6C2","--shiki-light":"#383A42"}},"="),i("span",{style:{"--shiki-dark":"#D19A66","--shiki-light":"#986801"}},"False"),i("span",{style:{"--shiki-dark":"#ABB2BF","--shiki-light":"#383A42"}},")")]),e(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-dark":"#C678DD","--shiki-light":"#A626A4"}},"def"),i("span",{style:{"--shiki-dark":"#61AFEF","--shiki-light":"#4078F2"}}," serialize_id"),i("span",{style:{"--shiki-dark":"#ABB2BF","--shiki-light":"#383A42"}},"("),i("span",{style:{"--shiki-dark":"#E5C07B","--shiki-dark-font-style":"italic","--shiki-light":"#986801","--shiki-light-font-style":"inherit"}},"self"),i("span",{style:{"--shiki-dark":"#ABB2BF","--shiki-light":"#383A42"}},","),i("span",{style:{"--shiki-dark":"#D19A66","--shiki-dark-font-style":"italic","--shiki-light":"#986801","--shiki-light-font-style":"inherit"}}," value"),i("span",{style:{"--shiki-dark":"#ABB2BF","--shiki-light":"#383A42"}},") -> "),i("span",{style:{"--shiki-dark":"#56B6C2","--shiki-light":"#0184BC"}},"str"),i("span",{style:{"--shiki-dark":"#ABB2BF","--shiki-light":"#383A42"}},":")]),e(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-dark":"#C678DD","--shiki-light":"#A626A4"}},"    return"),i("span",{style:{"--shiki-dark":"#56B6C2","--shiki-light":"#0184BC"}}," str"),i("span",{style:{"--shiki-dark":"#ABB2BF","--shiki-light":"#383A42"}},"(value)")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"})])],-1)])]),tab1:a(({value:t,isActive:l})=>[...s[3]||(s[3]=[i("div",{class:"language-python line-numbers-mode","data-highlighter":"shiki","data-ext":"python",style:{"--shiki-dark":"#abb2bf","--shiki-light":"#383A42","--shiki-dark-bg":"#282c34","--shiki-light-bg":"#FAFAFA"}},[i("pre",{class:"shiki shiki-themes one-dark-pro one-light vp-code"},[i("code",{class:"language-python"},[i("span",{class:"line"},[i("span",{style:{"--shiki-dark":"#61AFEF","--shiki-light":"#4078F2"}},"@field_serializer"),i("span",{style:{"--shiki-dark":"#ABB2BF","--shiki-light":"#383A42"}},"("),i("span",{style:{"--shiki-dark":"#98C379","--shiki-light":"#50A14F"}},"'id'"),i("span",{style:{"--shiki-dark":"#ABB2BF","--shiki-light":"#383A42"}},")")]),e(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-dark":"#C678DD","--shiki-light":"#A626A4"}},"def"),i("span",{style:{"--shiki-dark":"#61AFEF","--shiki-light":"#4078F2"}}," serialize_id"),i("span",{style:{"--shiki-dark":"#ABB2BF","--shiki-light":"#383A42"}},"("),i("span",{style:{"--shiki-dark":"#E5C07B","--shiki-dark-font-style":"italic","--shiki-light":"#986801","--shiki-light-font-style":"inherit"}},"self"),i("span",{style:{"--shiki-dark":"#ABB2BF","--shiki-light":"#383A42"}},","),i("span",{style:{"--shiki-dark":"#D19A66","--shiki-dark-font-style":"italic","--shiki-light":"#986801","--shiki-light-font-style":"inherit"}}," value"),i("span",{style:{"--shiki-dark":"#ABB2BF","--shiki-light":"#383A42"}},") -> "),i("span",{style:{"--shiki-dark":"#56B6C2","--shiki-light":"#0184BC"}},"str"),i("span",{style:{"--shiki-dark":"#ABB2BF","--shiki-light":"#383A42"}},":")]),e(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-dark":"#C678DD","--shiki-light":"#A626A4"}},"    return"),i("span",{style:{"--shiki-dark":"#56B6C2","--shiki-light":"#0184BC"}}," str"),i("span",{style:{"--shiki-dark":"#ABB2BF","--shiki-light":"#383A42"}},"(value)")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"})])],-1)])]),_:1})])])])}const A=h(c,[["render",y]]),B=JSON.parse('{"path":"/backend/reference/pk.html","title":"主键","lang":"zh-CN","frontmatter":{"title":"主键","description":"我们在 fba 中为数据库主键添加了两种选择，分别为传统模式（自增 ID）和雪花算法（雪花 ID），我们在全局范围内使用 自增 ID 作为主键的默认声明方式 在切换主键声明方式之前，让我们先来简单了解一下它们的特性，再决定是否需要切换 自增 ID 优点 简单易用 数据库原生支持 生成顺序递增 查询效率高 占用空间小 局限性 在分布式系统中可能出现 ID...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"主键\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-10-17T18:02:15.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://fastapi-practices.github.io/fastapi_best_architecture_docs/fastapi_best_architecture_docs/backend/reference/pk.html"}],["meta",{"property":"og:site_name","content":"FastAPI Best Architecture"}],["meta",{"property":"og:title","content":"主键"}],["meta",{"property":"og:description","content":"我们在 fba 中为数据库主键添加了两种选择，分别为传统模式（自增 ID）和雪花算法（雪花 ID），我们在全局范围内使用 自增 ID 作为主键的默认声明方式 在切换主键声明方式之前，让我们先来简单了解一下它们的特性，再决定是否需要切换 自增 ID 优点 简单易用 数据库原生支持 生成顺序递增 查询效率高 占用空间小 局限性 在分布式系统中可能出现 ID..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-17T18:02:15.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-17T18:02:15.000Z"}]]},"readingTime":{"minutes":2.2,"words":661},"git":{"createdTime":1750009202000,"updatedTime":1760724135000},"autoDesc":true,"filePathRelative":"backend/reference/pk.md","headers":[],"bulletin":true}');export{A as comp,B as data};
