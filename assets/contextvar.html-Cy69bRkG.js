import{_ as s,c as a,f as n,o as t}from"./app-DqtJ7nxx.js";const e={};function l(h,i){return t(),a("div",null,[...i[0]||(i[0]=[n(`<p>在异步编程和并发场景中，如何优雅地管理上下文相关的状态变量？传统的全局变量容易导致状态污染，而线程本地存储（ <code>threading.local</code>）又不适合异步任务的嵌套执行</p><p><code>ContextVar</code> 正是为此而生，它允许在同一个线程中，根据不同的执行上下文（如协程或任务）持有不同的变量值，而无需显式传递参数</p><h2 id="什么是-contextvar" tabindex="-1"><a class="header-anchor" href="#什么是-contextvar"><span>什么是 ContextVar？</span></a></h2><p><code>ContextVar</code> 是 <code>contextvars</code> 模块的核心类，用于声明和管理上下文变量。它类似于线程本地存储，但专为异步执行环境设计。在 Python 的异步框架如 <code>asyncio</code> 中，多个协程可能在同一线程中并发运行，如果使用全局变量，状态很容易在任务间“泄露”。<code>ContextVar</code> 通过维护一个每个线程的上下文栈来解决这个问题：每个上下文（<code>Context</code> 对象）可以持有变量的快照，进入新上下文时会推入栈顶，退出时自动回滚。</p><p>简单来说，<code>ContextVar</code> 让你在代码中隐式访问上下文特定的值，比如当前请求的日志追踪 ID，而不用层层传递参数。这在 Web 框架（如 FastAPI 或 Starlette）中特别常见。</p><h2 id="核心类和方法" tabindex="-1"><a class="header-anchor" href="#核心类和方法"><span>核心类和方法</span></a></h2><p><code>contextvars</code> 模块主要包含三个类：<code>ContextVar</code>、<code>Token</code> 和 <code>Context</code>。下面是它们的简要说明：</p><h3 id="contextvar" tabindex="-1"><a class="header-anchor" href="#contextvar"><span>ContextVar</span></a></h3><p>用于声明上下文变量</p><ul><li>构造函数：<code>ContextVar(name, default=None)</code>，其中 <code>name</code> 是字符串用于调试，<code>default</code> 是默认值</li><li>方法： <ul><li><code>get(default=None)</code>：获取当前上下文的值，如果未设置则返回 <code>default</code> 或抛出 <code>LookupError</code></li><li><code>set(value)</code>：设置当前上下文的值，返回一个 <code>Token</code> 对象用于回滚</li><li><code>reset(token)</code>：使用 <code>Token</code> 恢复上一个值</li></ul></li></ul><h3 id="token" tabindex="-1"><a class="header-anchor" href="#token"><span>Token</span></a></h3><p><code>set()</code> 返回的对象，用于追踪和恢复变量的旧值</p><p>它有属性如 <code>old_value</code>（旧值）和 <code>var</code>（关联的 <code>ContextVar</code>）。从 Python 3.14 开始，<code>Token</code> 支持上下文管理器协议，便于使用 <code>with</code> 语句</p><h3 id="context" tabindex="-1"><a class="header-anchor" href="#context"><span>Context</span></a></h3><p>表示一个上下文映射（类似于字典），管理变量的状态</p><ul><li><code>copy_context()</code>：复制当前上下文（O(1) 复杂度）</li><li><code>run(callable, *args, **kwargs)</code>：在指定上下文中执行可调用对象，执行后自动回滚变化</li></ul><h2 id="基本使用示例" tabindex="-1"><a class="header-anchor" href="#基本使用示例"><span>基本使用示例</span></a></h2><p>假设我们有一个名为 <code>user_id</code> 的上下文变量，用于追踪当前用户的 ID。</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-python"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">import</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> contextvars</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;"># 声明上下文变量，设置默认值</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">user_id </span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">=</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> contextvars.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;">ContextVar</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&#39;user_id&#39;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">, </span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#986801;--shiki-light-font-style:inherit;">default</span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">=</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&#39;anonymous&#39;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;"># 获取当前值</span></span>
<span class="line"><span style="--shiki-dark:#56B6C2;--shiki-light:#0184BC;">print</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(user_id.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;">get</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">())  </span><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;"># 输出: anonymous</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;"># 设置新值，返回 Token</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">token </span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">=</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> user_id.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;">set</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&#39;alice&#39;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">)</span></span>
<span class="line"><span style="--shiki-dark:#56B6C2;--shiki-light:#0184BC;">print</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(user_id.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;">get</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">())  </span><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;"># 输出: alice</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;"># 使用 Token 回滚</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">user_id.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;">reset</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(token)</span></span>
<span class="line"><span style="--shiki-dark:#56B6C2;--shiki-light:#0184BC;">print</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(user_id.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;">get</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">())  </span><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;"># 输出: anonymous</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再看一个使用 <code>Token</code> 作为上下文管理器的例子（Python 3.14+）：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-python"><span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">user_id </span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">=</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> contextvars.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;">ContextVar</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&#39;user_id&#39;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">, </span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#986801;--shiki-light-font-style:inherit;">default</span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">=</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&#39;anonymous&#39;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">with</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> user_id.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;">set</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&#39;bob&#39;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">):</span></span>
<span class="line"><span style="--shiki-dark:#56B6C2;--shiki-light:#0184BC;">    print</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(user_id.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;">get</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">())  </span><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;"># 输出: bob</span></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">    # 在 with 块内，所有访问都会看到 &#39;bob&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#56B6C2;--shiki-light:#0184BC;">print</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(user_id.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;">get</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">())  </span><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;"># 输出: anonymous（自动回滚）</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这比手动 <code>reset</code> 更安全，避免了遗忘回滚的风险</p><h2 id="在异步编程中的应用" tabindex="-1"><a class="header-anchor" href="#在异步编程中的应用"><span>在异步编程中的应用</span></a></h2><p><code>ContextVar</code> 的真正威力在异步环境中显现。以 <code>asyncio</code> 为例，我们可以构建一个简单的回显服务器，其中每个客户端连接的地址存储在上下文中，其他函数无需参数即可访问</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-python"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">import</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> asyncio</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">import</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> contextvars</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;"># 声明任务 ID 变量</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">task_id_var </span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">=</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> contextvars.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;">ContextVar</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&#39;task_id&#39;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">, </span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#986801;--shiki-light-font-style:inherit;">default</span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">=</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&#39;none&#39;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">async</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> def</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> sub_task</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">():</span></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">    # 无需传递参数，直接从上下文中获取</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">    task_id </span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">=</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> task_id_var.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;">get</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">()</span></span>
<span class="line"><span style="--shiki-dark:#56B6C2;--shiki-light:#0184BC;">    print</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">f</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&quot;Sub task running with task_id: </span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">{</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">task_id</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">}</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&quot;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">)</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">    await</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> asyncio.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;">sleep</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;">0.1</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">)  </span><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;"># 模拟工作</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">async</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> def</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> main_task</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#D19A66;--shiki-dark-font-style:italic;--shiki-light:#986801;--shiki-light-font-style:inherit;">task_id</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">):</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">    token </span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">=</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> task_id_var.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;">set</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(task_id)</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">    try</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">:</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">        await</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;"> sub_task</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">()</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">    finally</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">:</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">        task_id_var.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;">reset</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(token)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">async</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> def</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> main</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">():</span></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">    # 并发运行多个任务</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">    await</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> asyncio.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;">gather</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;">        main_task</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&#39;task1&#39;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">),</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;">        main_task</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&#39;task2&#39;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">)</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">    )</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;"># 运行示例</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">asyncio.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;">run</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#61AFEF;--shiki-light:#383A42;">main</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">())</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行这个代码，你会看到输出：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-text"><span class="line"><span>Sub task running with task_id: task1</span></span>
<span class="line"><span>Sub task running with task_id: task2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，sub_task() 函数无需知道任务 ID，就能从当前上下文中读取它。即使在 asyncio.gather 的并发执行中，每个任务的值也会正确隔离，不会与其他任务混淆。这比显式传递参数更简洁，尤其在深层嵌套的异步调用链中</p><p>另一个常见场景是日志追踪：在 ASGI 应用中，将请求 ID 存入 <code>ContextVar</code>，然后在任何下游函数中自动注入到日志中</p><h2 id="与-threading-local-的区别" tabindex="-1"><a class="header-anchor" href="#与-threading-local-的区别"><span>与 threading.local 的区别</span></a></h2><p><code>threading.local</code> 提供线程本地存储，每个线程有独立的变量副本，适合多线程程序。但在异步代码中，所有协程共享同一线程，导致 <code>local</code> 值在任务间泄露</p><p><code>ContextVar</code> 则基于执行上下文栈，支持协程的嵌套和切换：每个任务或生成器有自己的视图，变化在退出时自动回滚</p><p>简单比较：</p><table><thead><tr><th>特性</th><th>ContextVar</th><th>threading.local</th></tr></thead><tbody><tr><td>适用场景</td><td>异步/协程（asyncio）</td><td>多线程</td></tr><tr><td>隔离粒度</td><td>执行上下文（任务/生成器）</td><td>线程</td></tr><tr><td>回滚机制</td><td>自动（通过 Token 或 Context）</td><td>无需回滚，线程隔离</td></tr><tr><td>性能开销</td><td>低（O(1) 复制）</td><td>低</td></tr></tbody></table><p>如果你在用 <code>asyncio</code>，优先选择 <code>ContextVar</code></p><h2 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项"><span>注意事项</span></a></h2><ul><li><strong>创建位置</strong>：始终在模块顶层创建 <code>ContextVar</code>，避免在闭包或函数内创建，否则可能导致内存泄漏（上下文持有强引用）</li><li><strong>默认值</strong>：使用 <code>default</code> 参数避免 <code>LookupError</code>，但在异步中要小心默认值的共享</li><li><strong>兼容性</strong>：Python 3.7+ 支持，原生集成 <code>asyncio</code>。在多线程中，每个线程有独立栈</li><li><strong>调试</strong>：通过 <code>name</code> 属性和 <code>Context.items()</code> 检查变量状态</li></ul>`,37)])])}const d=s(e,[["render",l]]),p=JSON.parse('{"path":"/blog/contextvar.html","title":"ContextVar：异步编程中的上下文管理利器","lang":"zh-CN","frontmatter":{"title":"ContextVar：异步编程中的上下文管理利器","createTime":"2025-10-13 18:30","tags":["Python"],"description":"在异步编程和并发场景中，如何优雅地管理上下文相关的状态变量？传统的全局变量容易导致状态污染，而线程本地存储（ threading.local）又不适合异步任务的嵌套执行 ContextVar 正是为此而生，它允许在同一个线程中，根据不同的执行上下文（如协程或任务）持有不同的变量值，而无需显式传递参数 什么是 ContextVar？ ContextVar...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"ContextVar：异步编程中的上下文管理利器\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-10-13T09:12:44.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://fastapi-practices.github.io/fastapi_best_architecture_docs/fastapi_best_architecture_docs/blog/contextvar.html"}],["meta",{"property":"og:site_name","content":"FastAPI Best Architecture"}],["meta",{"property":"og:title","content":"ContextVar：异步编程中的上下文管理利器"}],["meta",{"property":"og:description","content":"在异步编程和并发场景中，如何优雅地管理上下文相关的状态变量？传统的全局变量容易导致状态污染，而线程本地存储（ threading.local）又不适合异步任务的嵌套执行 ContextVar 正是为此而生，它允许在同一个线程中，根据不同的执行上下文（如协程或任务）持有不同的变量值，而无需显式传递参数 什么是 ContextVar？ ContextVar..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-13T09:12:44.000Z"}],["meta",{"property":"article:tag","content":"Python"}],["meta",{"property":"article:modified_time","content":"2025-10-13T09:12:44.000Z"}]]},"readingTime":{"minutes":4.52,"words":1356},"git":{"createdTime":1760346764000,"updatedTime":1760346764000},"autoDesc":true,"filePathRelative":"blog/contextvar.md","headers":[],"categoryList":[],"bulletin":true}');export{d as comp,p as data};
