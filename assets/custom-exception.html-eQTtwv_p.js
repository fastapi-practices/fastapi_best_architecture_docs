import{_ as s,c as a,f as n,o as t}from"./app-DqtJ7nxx.js";const h={};function l(e,i){return t(),a("div",null,[...i[0]||(i[0]=[n(`<p>我们为 fba 精心设计了全局异常拦截器，它可以自动拦截所有异常信息，并按照标准化的返回信息进行异常信息返回</p><h2 id="异常拦截器" tabindex="-1"><a class="header-anchor" href="#异常拦截器"><span>异常拦截器</span></a></h2><p>在异常拦截器中，我们按照标准错误码进行错误处理</p><p>在响应中，我们存在两种状态码，分别为返回信息中的状态码和响应状态码；其中，响应状态码默认为编码级，前端完全可以根据此状态码进行异常处理页面跳转，例如，403（无权限操作），404（资源不存在）等等，而返回信息状态码为自定义级，可以在返回时任意自定义</p><p>响应状态码遵循 RFC 定义，如果不符合标准，则将状态码处理为 400</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-python"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">def</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;"> _get_exception_code</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#D19A66;--shiki-dark-font-style:italic;--shiki-light:#986801;--shiki-light-font-style:inherit;">status_code</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">:</span><span style="--shiki-dark:#56B6C2;--shiki-light:#0184BC;"> int</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">) -&gt; </span><span style="--shiki-dark:#56B6C2;--shiki-light:#0184BC;">int</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">:</span></span>
<span class="line"><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">    获取返回状态码（可用状态码基于 RFC 定义）</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">    \`python 状态码标准支持 &lt;https://github.com/python/cpython/blob/6e3cc72afeaee2532b4327776501eb8234ac787b/Lib/http/__init__.py#L7&gt;\`__</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">    \`IANA 状态码注册表 &lt;https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml&gt;\`__</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">    :param status_code: HTTP 状态码</span></span>
<span class="line"><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">    :return:</span></span>
<span class="line"><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">    try</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">:</span></span>
<span class="line"><span style="--shiki-dark:#D19A66;--shiki-light:#383A42;">        STATUS_PHRASES</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">[status_code]</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">        return</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> status_code</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">    except</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#0184BC;"> Exception</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">:</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">        return</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> StandardResponseCode.</span><span style="--shiki-dark:#D19A66;--shiki-light:#383A42;">HTTP_400</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>异常拦截器还包含：fastapi 数据校验异常，pydantic 数据校验异常，python assert 断言异常，全局未知（未定义）异常，跨域异常，自定义异常，详情请查看源代码： <code>backend/common/exception/exception_handler.py</code></p><h2 id="后台任务" tabindex="-1"><a class="header-anchor" href="#后台任务"><span>后台任务</span></a></h2><p>了解完异常处理器之后，再来讲讲如何自定义异常，我们先看下面这段代码，这是自定义异常的</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-python"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">class</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;"> BaseExceptionMixin</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#C18401;">(</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#0184BC;">Exception</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#C18401;">)</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">:</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">    code: </span><span style="--shiki-dark:#56B6C2;--shiki-light:#0184BC;">int</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">    def</span><span style="--shiki-dark:#56B6C2;--shiki-light:#0184BC;"> __init__</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#E5C07B;--shiki-dark-font-style:italic;--shiki-light:#986801;--shiki-light-font-style:inherit;">self</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> *</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#986801;">, </span><span style="--shiki-dark:#D19A66;--shiki-dark-font-style:italic;--shiki-light:#986801;--shiki-light-font-style:inherit;">msg</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">:</span><span style="--shiki-dark:#56B6C2;--shiki-light:#0184BC;"> str</span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;"> =</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> None</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span><span style="--shiki-dark:#D19A66;--shiki-dark-font-style:italic;--shiki-light:#986801;--shiki-light-font-style:inherit;"> data</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">:</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#986801;"> Any </span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">=</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> None</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span><span style="--shiki-dark:#D19A66;--shiki-dark-font-style:italic;--shiki-light:#986801;--shiki-light-font-style:inherit;"> background</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">:</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#986801;"> BackgroundTask </span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">|</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> None</span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;"> =</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> None</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">):</span></span>
<span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">        self</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">.msg </span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">=</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> msg</span></span>
<span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">        self</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">.data </span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">=</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> data</span></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">        # The original background task: https://www.starlette.io/background/</span></span>
<span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#E45649;">        self</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">.background </span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">=</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> background</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这段代码中，我们有一个参数为 <code>background</code>（由于 fastapi 继承了 starlette，这意味者，fastapi 拥有 starlette 中的所有功能，所以，这里的注释，我们直接导航到了 starlette），它可以让我们添加后台任务，这遵循了 starlette 的后台任务处理，所以，你不仅可以使用 fastapi 中的后台任务定义方式，还完全可以使用 statlette 中的后台任务定义方式</p><p>请注意 <mark class="tip">后台任务应附加到响应，并且仅在发送响应后才运行</mark> ，这非常重要！并且，任务按顺序执行。如果其中一个任务引发异常，则后面的任务将没有机会执行。所以，我们只推荐为极小的任务使用此方式进行处理！</p><h2 id="自定义异常" tabindex="-1"><a class="header-anchor" href="#自定义异常"><span>自定义异常</span></a></h2><p>上方我们已经介绍完了自定义异常中包含的其他附加业务，下方我们来讲下如何自定义异常，在文件 <code>backend/common/exception/errors.py</code> 中，我们内置了多种自定义异常类，它们结构基本相当，例如：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-python"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">class</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;"> NotFoundError</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#C18401;">(</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;">BaseExceptionMixin</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#C18401;">)</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">:</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">    code </span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">=</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> StandardResponseCode.</span><span style="--shiki-dark:#D19A66;--shiki-light:#383A42;">HTTP_404</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">    def</span><span style="--shiki-dark:#56B6C2;--shiki-light:#0184BC;"> __init__</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#E5C07B;--shiki-dark-font-style:italic;--shiki-light:#986801;--shiki-light-font-style:inherit;">self</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> *</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#986801;">, </span><span style="--shiki-dark:#D19A66;--shiki-dark-font-style:italic;--shiki-light:#986801;--shiki-light-font-style:inherit;">msg</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">:</span><span style="--shiki-dark:#56B6C2;--shiki-light:#0184BC;"> str</span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;"> =</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> &#39;Not Found&#39;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span><span style="--shiki-dark:#D19A66;--shiki-dark-font-style:italic;--shiki-light:#986801;--shiki-light-font-style:inherit;"> data</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">:</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#986801;"> Any </span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">=</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> None</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span><span style="--shiki-dark:#D19A66;--shiki-dark-font-style:italic;--shiki-light:#986801;--shiki-light-font-style:inherit;"> background</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">:</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#986801;"> BackgroundTask </span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">|</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> None</span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;"> =</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> None</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">):</span></span>
<span class="line"><span style="--shiki-dark:#56B6C2;--shiki-light:#0184BC;">        super</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">().</span><span style="--shiki-dark:#56B6C2;--shiki-light:#0184BC;">__init__</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#986801;--shiki-light-font-style:inherit;">msg</span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">=</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">msg, </span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#986801;--shiki-light-font-style:inherit;">data</span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">=</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">data, </span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#986801;--shiki-light-font-style:inherit;">background</span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">=</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">background)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是我们经常使用的错误类之一，其中，参数 <code>code</code> 被定义为编码级响应状态码，参数 <code>msg</code>、<code>data</code> 对应在返回信息中，fba 会在内部自动处理，参数 <code>background</code> 正式我们上方所讲的后台任务</p><p>我们来动手试着定义一个：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-dark:#abb2bf;--shiki-light:#383A42;--shiki-dark-bg:#282c34;--shiki-light-bg:#FAFAFA;"><pre class="shiki shiki-themes one-dark-pro one-light vp-code"><code class="language-python"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">class</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;"> 自定义错误类</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#C18401;">(</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;">BaseExceptionMixin</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#C18401;">)</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">:</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">    code </span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">=</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> 遵循 </span><span style="--shiki-dark:#D19A66;--shiki-light:#383A42;">RFC</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> 定义的响应状态码</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">    </span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">    def</span><span style="--shiki-dark:#56B6C2;--shiki-light:#0184BC;"> __init__</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#E5C07B;--shiki-dark-font-style:italic;--shiki-light:#986801;--shiki-light-font-style:inherit;">self</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> *</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#986801;">, </span><span style="--shiki-dark:#D19A66;--shiki-dark-font-style:italic;--shiki-light:#986801;--shiki-light-font-style:inherit;">msg</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">:</span><span style="--shiki-dark:#56B6C2;--shiki-light:#0184BC;"> str</span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;"> =</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;"> &#39;自定义&#39;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span><span style="--shiki-dark:#D19A66;--shiki-dark-font-style:italic;--shiki-light:#986801;--shiki-light-font-style:inherit;"> data</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">:</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#986801;"> Any </span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">=</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> None</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">,</span><span style="--shiki-dark:#D19A66;--shiki-dark-font-style:italic;--shiki-light:#986801;--shiki-light-font-style:inherit;"> background</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">:</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#986801;"> BackgroundTask </span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">|</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> None</span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;"> =</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> None</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">):</span></span>
<span class="line"><span style="--shiki-dark:#56B6C2;--shiki-light:#0184BC;">        super</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">().</span><span style="--shiki-dark:#56B6C2;--shiki-light:#0184BC;">__init__</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#986801;--shiki-light-font-style:inherit;">msg</span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">=</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">msg, </span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#986801;--shiki-light-font-style:inherit;">data</span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">=</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">data, </span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#986801;--shiki-light-font-style:inherit;">background</span><span style="--shiki-dark:#56B6C2;--shiki-light:#383A42;">=</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">background)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="如何使用" tabindex="-1"><a class="header-anchor" href="#如何使用"><span>如何使用</span></a></h2><p>使用方式非常简单，我们在 fba 代码内任意位置直接使用 <code>raise errors.xxxError(msg=&#39;xxx&#39;)</code> 即可，自定义异常会在异常处理器中自动处理并返回</p>`,20)])])}const p=s(h,[["render",l]]),d=JSON.parse('{"path":"/blog/custom-exception.html","title":"如何自定义异常？","lang":"zh-CN","frontmatter":{"title":"如何自定义异常？","createTime":"2025-01-26 16:43","tags":["FastAPI"],"description":"我们为 fba 精心设计了全局异常拦截器，它可以自动拦截所有异常信息，并按照标准化的返回信息进行异常信息返回 异常拦截器 在异常拦截器中，我们按照标准错误码进行错误处理 在响应中，我们存在两种状态码，分别为返回信息中的状态码和响应状态码；其中，响应状态码默认为编码级，前端完全可以根据此状态码进行异常处理页面跳转，例如，403（无权限操作），404（资源...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"如何自定义异常？\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-10-11T05:42:19.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://fastapi-practices.github.io/fastapi_best_architecture_docs/fastapi_best_architecture_docs/blog/custom-exception.html"}],["meta",{"property":"og:site_name","content":"FastAPI Best Architecture"}],["meta",{"property":"og:title","content":"如何自定义异常？"}],["meta",{"property":"og:description","content":"我们为 fba 精心设计了全局异常拦截器，它可以自动拦截所有异常信息，并按照标准化的返回信息进行异常信息返回 异常拦截器 在异常拦截器中，我们按照标准错误码进行错误处理 在响应中，我们存在两种状态码，分别为返回信息中的状态码和响应状态码；其中，响应状态码默认为编码级，前端完全可以根据此状态码进行异常处理页面跳转，例如，403（无权限操作），404（资源..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-11T05:42:19.000Z"}],["meta",{"property":"article:tag","content":"FastAPI"}],["meta",{"property":"article:modified_time","content":"2025-10-11T05:42:19.000Z"}]]},"readingTime":{"minutes":2.98,"words":894},"git":{"createdTime":1758470082000,"updatedTime":1760161339000},"autoDesc":true,"filePathRelative":"blog/custom-exception.md","headers":[],"categoryList":[],"bulletin":true}');export{p as comp,d as data};
